1. OOP (Object-Oriented Programming)
   - 객체 지향 프로그래밍. 클래스와 객체를 중심으로 코드를 구조화하는 방식. // 반대는 절차 지향(POP) , 예) C언어 , Pascal 등...

2. JVM (Java Virtual Machine)
   - 자바 바이트코드를 실행하는 가상 머신. 플랫폼 독립성을 제공.

3. Spring Boot
   - 자바 기반의 웹 프레임워크로, 복잡한 설정 없이 빠른 애플리케이션 개발을 지원.

4. RESTful API
   - 자원 중심의 HTTP 기반 웹 API 설계 방식.

5. Dependency Injection
   - 객체 간의 의존성을 외부에서 주입해주는 디자인 패턴. 스프링의 핵심 개념.

6. Pandas
   - 데이터 처리 및 분석을 위한 Python 라이브러리.

7. NumPy
   - 수치 계산을 위한 Python 라이브러리. 배열과 행렬 중심.

8. Jupyter Notebook 과 jupyter Lab
   - 파이썬을 엔진으로 인터랙티브한 데이터 분석 환경을 제공하는 웹 기반 툴.

9. ETL Tool
   - 데이터를 추출(Extract), 변환(Transform), 적재(Load)하는 도구. 대규모 데이터 통합 및 이관에 사용.

10. Missing Value (결측치)
   - 데이터셋에서 값이 존재하지 않는 상태. 분석 전 반드시 처리해야 함.

11. HTML
   - 웹 페이지의 구조를 설계하는 마크업 언어.

12. CSS
   - HTML 요소의 스타일(색상, 레이아웃 등)을 정의하는 언어.

13. JavaScript
   - 웹 페이지에 동적인 기능을 추가하는 스크립트 언어.

14. DOM (Document Object Model)
   - HTML 문서를 객체처럼 다루는 트리 구조.

15. Event Handling
   - 사용자 이벤트(클릭, 입력 등)에 대한 처리 방식.

16. React
   - UI 구성요소를 만들기 위한 JavaScript 라이브러리.

17. Component
   - UI를 구성하는 독립적인 단위. 재사용 가능.

18. Props
   - 부모 컴포넌트가 자식 컴포넌트로 데이터를 전달하는 방법.

19. State
   - 컴포넌트 내부에서 관리되는 동적인 데이터.

20. useEffect
   - React 훅 중 하나로, 컴포넌트 생명주기 중 특정 시점에 실행되는 함수.

21. SQL
   - 관계형 데이터베이스에서 데이터 조회 및 조작을 위한 언어.

22. Join
   - 두 개 이상의 테이블을 연결하여 데이터를 조회하는 SQL 연산.

23. MongoDB
   - 비관계형 문서 기반 NoSQL 데이터베이스.

24. Document
   - MongoDB에서 데이터를 저장하는 단위. JSON 형태.

25. Index
   - 데이터 검색 성능을 높이기 위한 구조.

26. Git
   - 버전 관리 시스템. 코드 변경사항을 추적하고 협업 가능.

27. GitHub
   - Git 저장소를 온라인으로 관리하고 공유할 수 있는 플랫폼.

28. Docker
   - 컨테이너 기반 가상화 기술로, 환경 차이 없이 애플리케이션 실행 가능.

29. Container
   - 애플리케이션과 실행 환경을 패키징한 단위.

30. CI/CD
   - 지속적 통합 및 배포. 코드 변경 시 자동으로 빌드/테스트/배포를 수행.

31. Structured Data (정형 데이터)
   - 행과 열로 구성된 고정된 형태의 데이터. 예: RDB의 테이블

32. Semi-Structured Data (반정형 데이터)
   - 고정된 스키마는 없지만 특정 구조를 갖는 데이터. 예: JSON, XML, HTML

33. Unstructured Data (비정형 데이터)
   - 형식이 정의되지 않은 데이터. 예: 이미지, 영상, 자연어 문서

34. Metadata
   - 데이터를 설명하는 데이터. 예: 파일 크기, 생성 날짜

35. Hadoop
   - 분산 저장과 처리 기능을 제공하는 오픈소스 빅데이터 프레임워크.

36. Spark
   - 메모리 기반의 빠른 빅데이터 처리 프레임워크.

37. Data Lake
   - 정형, 비정형 데이터를 모두 저장할 수 있는 대용량 저장소.

38. ETL (Extract, Transform, Load)
   - 데이터를 추출, 가공, 적재하는 과정.

39. Data Pipeline
   - 데이터가 수집되고 가공되어 저장 또는 분석되는 흐름을 자동화한 시스템.

40. Full-Stack
   - 프론트엔드와 백엔드를 모두 다룰 수 있는 개발 영역.

41. Frontend
   - 사용자와 직접 상호작용하는 웹의 화면/UI 부분.

42. Backend
   - 데이터 처리, 비즈니스 로직, DB 등 서버 사이드 영역.

43. GET Method
   - 서버로부터 데이터를 조회하는 HTTP 요청 방식.

44. POST Method
   - 서버에 데이터를 생성하거나 제출하는 HTTP 요청 방식.

45. HTTP
   - 웹에서 클라이언트와 서버 간의 통신 프로토콜.

46. HTTPS
   - HTTP에 SSL/TLS 보안이 추가된 암호화 통신 프로토콜.

47. Request
   - 클라이언트가 서버에 보내는 데이터 요청.

48. Response
   - 서버가 클라이언트의 요청에 대해 보내는 데이터.

49. Status Code
   - HTTP 응답의 상태를 나타내는 숫자 코드 (예: 200, 404, 500 등).

50. Cookie
   - 클라이언트에 저장되는 작은 데이터 조각으로 사용자 정보를 담음.

51. Session
   - 서버에 저장되는 사용자 상태 정보. 인증 상태 유지에 사용.

52. JWT (JSON Web Token)
   - 웹 인증을 위한 토큰 방식. 사용자 상태를 암호화해 저장.

53. CORS 에러 (Cross-Origin Resource Sharing Error)
  -브라우저 보안 정책(Same-Origin Policy)에 의해, 다른 도메인(출처)에서 요청을 보낼 경우 허용되지 않으면 차단됨.
    (예: 프론트엔드가 localhost:3000인데 백엔드 API가 localhost:8080이면 다른 Origin 간 통신으로 간주되어 에러 발생 가능.)

54. XSS
   - 웹 페이지에 악성 스크립트를 삽입하여 실행시키는 공격 방식.

55. API (Application Programming Interface)
   - 소프트웨어 간의 기능을 공유하기 위한 인터페이스.

56. Framework
   - 개발을 위한 기본 구조 및 뼈대. 예: Spring, React, Django

57. Library
   - 특정 기능을 수행하기 위한 코드 집합. 예: Pandas, NumPy, Matplotlib(Matrix Plot Library의 줄임말)

58. MVC Pattern
   - Model-View-Controller 구조. 웹 애플리케이션 아키텍처 패턴.

59. Load Balancer
   - 트래픽을 여러 서버로 분산시켜 처리 효율을 높이는 시스템.

60. 데이터 수집
   - 다양한 출처에서 데이터를 자동 또는 수동으로 수집하는 과정. 예: API, 센서, 로그, 크롤링.

61. 데이터 저장
   - 수집된 데이터를 보관하는 단계. 예: RDB, NoSQL, Hadoop, 데이터 레이크.

62. 데이터 정제
   - 오류나 불완전한 데이터를 제거 또는 수정하는 과정.

63. 데이터 변환
   - 필요한 형태로 데이터를 구조화하거나 재가공하는 작업. 예: 피벗, 조인, 스케일링.

64. 데이터 분석
   - 통계나 모델링을 통해 인사이트를 도출하는 과정. 예: 회귀분석, 군집화.

65. 데이터 시각화
   - 데이터를 그래프나 차트로 시각적으로 표현하여 이해도를 높이는 단계.

그외 npm , pip , mvn 등등 실습에 관한 명령어 들도 익히고 있을 것.
