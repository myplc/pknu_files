<리눅스>

리눅스는 유닉스 계열의 오픈소스 운영체제다. 1991년 리누스 토르발스가 개발했는데, 다양한 장점으로 인기를 얻고 있다. 리눅스는 1991년 리눅스 토발스라는 핀란드 학생이 처음 개발한 오픈소스 운영체제입니다. 

+장점
1. 오픈소스:  서두에 언급했듯, 리눅스는 소스 코드가 공개된 '오픈소스' 소프트웨어다. 이는 누구나 자유롭게 수정하고 배포할 수 있다는 뜻이다. 덕분에 개발적인 제약이 적은 편이어서 지속적인 발전을 가능케 한다.
2. 안정성 : 리눅스는 뛰어난 안정성으로 유명하다. 장기간 구동해도 시스템이 안정적으로 작동하는 덕분에 서버 환경에서 특히 강점을 보인다. 
3. 보안성 : 보안 측면에서도 비교적 우수한 성능을 자랑한다. 바이러스나 악성코드에 감염될 확률이 낮고, 정기적인 업데이트로 취약점을 빠르게 보완하는 편이기도 하다.

<우분투>

기본적으로 우분투는 운영체제의 한 종류에 해당한다. 운영체제라는 것은 operation system의 약자로 컴퓨터 하드웨어가 정상적으로 작동할 수 있게끔 도와주는 소프트웨어 프로그램입니다. 운영체제는 메모리관리, 입출력 처리, CPU 및 디스크 스토리지와 같은 시스템 자원을 제어하는 작업을 담당하는데 우리가 사용하는 모든 프로그램이 이 운영체제 위에서 작동을 하게 됩니다. 널리 사용되는 운영체제들의 예시로는 windows, MacOs, IOS, 안드로이드, 리눅스 등

+특징
우분투는 리눅스 커널을 기반으로 2004년에 탄생한 오픈 소스 운영체제 입니다. 현재 우분투는 영국에 있는 '캐노니컬' 이라는 회사에서 유지되고 관리되고 있으며, 가장 인기 있는 리눅스 무료 ㅂ포판 운영체제 중 하나로 전 세계의 기업과 개인들이 널리 사용하고 있습니다. 

+장점
-무료: 우분투의 주요 특징 중 하나는 무료 오픈 소스 소프트웨어라는 점이다. 이 말은 곧 누구나 라이센스 비용을 지불하지 않더라도 사용하거나 수정할 수 있다는 의미이다. 또한 평범한 사용자들이 소스 코드에 접근할 수 있다는 것을 의미하며 개개인의 필요에 따라 코드를 수정하고 개선할 수 있습니다. 

-쉽다: 우분투 운영체제는 사용자 친화적이면서 사용하기가 쉬운 프로그램으로 널리 알려져 있다. 그래픽 사용자 인터페이스는 윈도우나 맥 OS등의 인기있는 운영체제들과 사용 방식이 비슷하기 때문에 리눅스를 처음 사용하는 사람들도 친숙하게 다가갈 수 있습니다. 

-보안성: 다른 운영체제들에 비해 안전하다. 리눅스에 비해 우분투는 바이러스와 악성 프로그램에 덜 취약한 것으로 알려져 잇으며, 이 말은 곧 우분투를 사용하는 사람들이 보안 문제를 겪을 가능성이 낮다는 것을 의미한다. 그리고 본사에 의해 정기적으로 보안 업데이트가 진행되기 때문에 앞으로도 보안성이 더욱 향상될 것으로 보인다. 

-활발한 커뮤니티: 시장 점유율이 큰 운영체제 소프트웨어로 우분투를 활용한 수많은 개발자들과 사요자들이 있어 그만큼 대규모 커뮤니티가 활성화 된다는 뜻이다. 따라서 우분투를 사용하는 과정에서 여러가지 어려움과 문제점들에 대해서 지원을 받을 수 있고, 우분투를 유지 관리하는 '캐노니컬'에서 제공하는 서비스도 이용할 수 있게 된다. 

<데비안>
데비안은 흔히 리눅스 배포판의 원조로 꼽힌다. 우분투 역시 데비안을 기반으로 탄생했다. 그 후 우분투를 기반으로 한 수많은 배포판이 출편한 것이다. 우분투의 첫 릴리스는 2004년 10월의 4.10 버전이었다. 우분투는 그 후 데스크톱 버전과, 서버 버전, IoT 전용 버전 등 세 가지로 출시되었다.

데비안과 우분투는 모두 동일한 기본 패키지 관리 시스템인 ‘apt’와 ‘dpkg’를 공유한다. 그 중 apt(및 apt-get)는 원격 저장소에서 패키지를 설치하는 데 사용되는 반면, dpkg는 다운로드한 ‘.deb’ 파일을 설치하는 데 사용된다. 다만 가장 큰 차이점은 우분투는 기본적으로 스냅(Snap) 범용 패키지 관리자를 설치한다는 것이다. 이에 비해 데비안에선 이런 기능을 찾을 수 없다. 다만 설치는 할 수 있다. 이는 큰 불편은 아니지만 일단 우분투가 사용자에게 좀더 친화적인 도구로 보일 수 있는 대목이다.

두 배포판 모두 슈퍼 유저의 실행 프로그램 즉, ‘sudo’ 보안 메커니즘을 사용하지만, 우분투만 생성된 기본 사용자를 기본적으로 ‘sudo’ 그룹에 추가한다. 이에 비해 데비안의 경우 명령을 사용, sudo 그룹에 사용자를 수동으로 추가해야 한다. 또는 ‘usermod -aG sudo USER’와 같이 루트 사용자로 실행해야 한다. 그 때문에 우분투의 기능이 좀더 편리하다는 평가도 있다.

차이점: 우분투 2가지 릴리스, 데비안 3가지 릴리스

우분투는 LTS(장기 지원)과, 일반 릴리스 등 두 가지 릴리스로 제공된다. 그 중 LTS 릴리스는 2년마다 제공되며, 메인 저장소의 모든 패키지에 대해 5년간의 표준 보안 유지 관리를 받는다. 정기 릴리스는 6개월마다 제공되며, 그 것도 9개월 동안만 지원된다. 이 경우 사용자가 우분투 프로(이전 명칭 우분투 어드밴티지)를 구독하면 10년 동안 ‘Main’ 및 ‘Universe’ 저장소의 패키지에 대한 보안 수정 사항을 포함한, 확장된 보안 유지 관리에 액세스할 수 있다.

반면에 데비안에는 ‘Stable’, ‘Testing’. ‘Unstable’ 등 3 가지 릴리스가 있다. 이들 3 가지 중에서 ‘Stable’ 릴리스만 프로덕션 목적으로 사용할 수 있다. 그러나 ‘Testing’ 릴리스에는 최신 소프트웨어가 포함되어 있다. 그래서 “최근에 릴리스된 소프트웨어가 포함된 데비안을 원하면 ‘Testing’ 브랜치를 선택할 것”을 권하는 개발자들도 있다. ‘Testing’ 버전은 ‘Stable’ 브랜치의 기반으로 사용된다. 또한 ‘Stable’ 브랜치만 2년마다 정기 릴리스된다.

데비안이나 우분투는 또한 최첨단 소프트웨어를 제공하지 않는 점에선 똑같다. 다만 우분투는 일단 최신 패키지를 사용한다. 사용자가 로그인한 상태에서 모든 업데이트를 수행하고 커널이 업그레이드된 경우에만 재부팅이 필요하다는게 특징이다. 반면에 데비안은 안정성을 중시한다. 그 때문에 굳이 최신 버전의 소프트웨어 출시를 목표로 하지 않는다.
--------------------------------------------------------------------------------------------------------------------
 
커널과 쉘사용자가 입력한 명령어는 일련의 과정을 거쳐 하드웨어를 제어하게 된다. 사용자가 명령어를 작성하고 조작하기까지 이 사이에는 몇 가지의 과정을 거쳐서 수행을 하게 되는데, 우리가 명령어를 입력하게 되면 컴퓨터 내부에서는 쉘(Shell) 이 이를 받아들이고, 명령어를 해석하여 커널(Kernel) 을 통해 하드웨어를 조작한다. 즉, 제일 하단에는 하드웨어가 있고, 그 위에는 커널, 커널위에는 쉘, 그리고 쉘 위에는 사용자가 존재하여 사용자 유저의 입력을 받게 된다.

<커널>
커널은 운영체제의 핵심입니다. 쉽게 말해, 소프트웨어와 하드웨어간의 커뮤니케이션을 관리하는 프로그램이다. 운영체제에서 가장 중요한 구성요소로서 입출력을 관리하고 소프트웨어로부터의 요청을 컴퓨터에 있는 하드웨어(CPU, 메모리, 저장장치등)가 처리 할 수 있도록 요청을 변환하는 역할을 한다. 이렇게 하드웨어를 관리하고 필요한 프로세스를 나눠주는 등 여러 시스템 자원을 제어하고, 컴퓨터 부팅시 부트로더에 의해 로드되어 항상 메모리에 상주하게 된다.

+역할

-보안: 컴퓨터 하드웨어와 프로세스의 보안을 책임진다. 

-자원 관리: 한정된 시스템 자원을 효율적으로 관리하여 프로그램의 실행을 원활하게 한다. 특히 프로세스에 처리기를 할당하는 것을 스케줄링이라한다.

-추상화: 같은 종류의 부품에 대해 다양한 하드웨어를 설계할 수 있기 떄문에 하드웨어에 직접 접근하는 것은 문제를 매우 복잡하게 만들 수 있다. 일반적으로 커널은 운영체제의 복잡한 내부를 감추고 깔끔하고 일관성 있는 인터페이스를 하드웨어에 제공하기 위해 몇 가지 하드웨어 추상화들을 구현한다. 

<쉘>

 쉘은 사용자의 응용프로그램과 커널 사이에 위치해 있으며 응용 프로그램의 명령어와 커널이 대화를 하도록 만들어준다. 우리가 명령어를 입력하게 되면 컴퓨터에서는 쉘이 명령어를 받아 해석하여 커널에게 보내면 커널은 우리가 내려주었던 동작을 하게 된다. 그래서 그에 대한 결과를 사용자에게 전달하려고 다시 쉘에 응답을 보내고 쉘을 거쳐 사용자에게 도달한다. 



